{"version":3,"sources":["logo-white.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","states","balance","useState","vac","setVac","profile","setProfile","process","REACT_APP_GOOGLE_SHEET_ID","REACT_APP_GOOGLE_PRIVATE_KEY","REACT_APP_GOOGLE_SERVICE_ACCOUNT_EMAIL","REACT_APP_OATH_CLIENT_ID","doc","GoogleSpreadsheet","useServiceAccountAuth","client_email","private_key","replace","getInfo","sheet","sheetsByIndex","getRows","useEffect","gapi","load","auth2","init","clientId","scope","className","src","logo","alt","name","email","sickLastYear","vacLastYear","buttonText","onLogoutSuccess","onSuccess","res","profileObj","then","rows","find","x","onFailure","err","console","log","cookiePolicy","isSignedIn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wkBAAe,MAA0B,uC,OCoH1BA,MA7Gf,SAAaC,GACX,IAAMC,EACK,CACPC,QAAS,cAFPD,EAOI,CACNC,QAAS,4BAIb,EAAsBC,mBAASF,GAAe,mBAAvCG,EAAG,KAAEC,EAAM,KAClB,EAA8BF,mBAAS,MAAK,mBAArCG,EAAO,KAAEC,EAAU,KAC1B,EAKIC,grEAJFC,EAAyB,EAAzBA,0BACAC,EAA4B,EAA5BA,6BACAC,EAAsC,EAAtCA,uCACAC,EAAwB,EAAxBA,yBAGIC,EAAM,IAAIC,oBAAkBL,GAEZ,aAQrB,OARqB,kCAAtB,8GACQI,EAAIE,sBAAsB,CAC9BC,aAAcL,EACdM,YAAaP,EAA6BQ,QAAQ,QAAS,QAC1D,KAAD,kBACIL,EAAIM,UAAU,KAAD,EACgB,OAA7BC,EAAQP,EAAIQ,cAAc,GAAE,kBAC3BD,EAAME,WAAS,4CACvB,sBA+BD,OA7BAC,qBAAU,WAORC,IAAKC,KAAK,gBANS,WACjBD,IAAKE,MAAMC,KAAK,CACZC,SAAUhB,EACViB,MAAO,SAEb,GAEF,GAAG,CAACjB,IAsBF,sBAAKkB,UAAU,MAAK,UAClB,qBAAKA,UAAU,WAAU,SACvB,qBAAKA,UAAU,WAAWC,IAAKC,EAAMC,IAAI,kBAE3C,wBAAQH,UAAU,aAAY,SAC7BxB,EACD,gCACI,8BACE,sBAAMwB,UAAU,YAAW,mBAC3B,sBAAMA,UAAU,YAAW,SAAExB,EAAQ4B,UAEvC,8BACE,sBAAMJ,UAAU,YAAW,oBAC3B,sBAAMA,UAAU,YAAW,SAAExB,EAAQ6B,WAEvC,8BACE,sBAAML,UAAU,YAAW,sBAC3B,sBAAMA,UAAU,YAAW,SAAE1B,EAAIF,aAEnC,8BACE,sBAAM4B,UAAU,YAAW,yCAC3B,sBAAMA,UAAU,YAAW,SAAE1B,EAAIgC,kBAEnC,8BACE,sBAAMN,UAAU,YAAW,iCAC3B,sBAAMA,UAAU,YAAW,SAAE1B,EAAIiC,iBAEnC,cAAC,eAAY,CAACT,SAAUhB,EAA0B0B,WAAW,UAAUC,gBAjChE,WACXhC,EAAW,MACXF,EAAOJ,EACX,OAiCI,cAAC,cAAW,CACR2B,SAAUhB,EACV0B,WAAW,sBACXE,UArDU,SAACC,GACjBlC,EAAWkC,EAAIC,YACfrC,EAAOJ,GAxBoD,WAEvC,+BAuBpBqB,GACCqB,MAAK,SAAAC,GAAS,IAAD,EACZvC,EAAuD,QAAjD,EAACuC,EAAKC,MAAK,SAAAC,GAAC,OAAIA,EAAEX,QAAUM,EAAIC,WAAWP,KAAK,WAAC,QAAI,CAACjC,QAAS,WACvE,GACF,EA+CQ6C,UA7CU,SAACC,GACfC,QAAQC,IAAI,SAAUF,GACtB3C,EAAOJ,EACX,EA2CQkD,aAAc,qBACdC,YAAY,QAOtB,ECtGeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBZ,MAAK,YAAkD,IAA/Ca,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,ECJAO,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAK1BZ,G","file":"static/js/main.6cca8ec2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-white.d7f37808.svg\";","import './App.css';\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport { gapi } from 'gapi-script';\nimport {useState, useEffect} from 'react';\nimport logo from './logo-white.svg';\n\nfunction App(props) {\n  const states = {\n    loading: {\n      balance: \"Loading...\"\n    },\n    noData: {\n      balance: \"No data.\"\n    },\n    failed: {\n      balance: \"Failed to retrieve data.\"\n    }\n  }\n\n  const [vac, setVac] = useState(states.loading);\n  const [profile, setProfile] = useState(null);\n  const {\n    REACT_APP_GOOGLE_SHEET_ID,\n    REACT_APP_GOOGLE_PRIVATE_KEY,\n    REACT_APP_GOOGLE_SERVICE_ACCOUNT_EMAIL,\n    REACT_APP_OATH_CLIENT_ID\n  } = process.env;\n\n  const doc = new GoogleSpreadsheet(REACT_APP_GOOGLE_SHEET_ID);\n\n  async function getRows() {\n    await doc.useServiceAccountAuth({\n      client_email: REACT_APP_GOOGLE_SERVICE_ACCOUNT_EMAIL,\n      private_key: REACT_APP_GOOGLE_PRIVATE_KEY.replace(/\\\\n/gm, '\\n'),\n    });\n    await doc.getInfo();\n    const sheet = doc.sheetsByIndex[0];\n    return sheet.getRows();\n  }\n\n  useEffect(() => {\n    const initClient = () => {\n      gapi.auth2.init({\n          clientId: REACT_APP_OATH_CLIENT_ID,\n          scope: 'email'\n      });\n    };\n    gapi.load('client:auth2', initClient);\n  }, [REACT_APP_OATH_CLIENT_ID])\n\n  const onSuccess = (res) => {\n    setProfile(res.profileObj);\n    setVac(states.loading);\n    getRows()\n    .then(rows => {\n      setVac(rows.find(x => x.email === res.profileObj.email) ?? {balance: \"No Data\"})\n    })\n  };\n\n  const onFailure = (err) => {\n      console.log('failed', err);\n      setVac(states.failed);\n  };\n\n  const logOut = () => {\n      setProfile(null);\n      setVac(states.loading);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-logo\">\n        <img className=\"App-logo\" src={logo} alt=\"SiliconMint\"/>\n      </div>\n      <header className=\"App-header\">\n      {profile ? (\n      <div>\n          <p>\n            <span className=\"App-label\">Name:</span>\n            <span className=\"App-value\">{profile.name}</span>\n          </p>\n          <p>\n            <span className=\"App-label\">Email:</span>\n            <span className=\"App-value\">{profile.email}</span>\n          </p>\n          <p>\n            <span className=\"App-label\">Balance:</span>\n            <span className=\"App-value\">{vac.balance}</span>\n          </p>\n          <p>\n            <span className=\"App-label\">Sick Leaves Used Last Year:</span>\n            <span className=\"App-value\">{vac.sickLastYear}</span>\n          </p>\n          <p>\n            <span className=\"App-label\">Vac Used Last Year:</span>\n            <span className=\"App-value\">{vac.vacLastYear}</span>\n          </p>\n          <GoogleLogout clientId={REACT_APP_OATH_CLIENT_ID} buttonText=\"Log out\" onLogoutSuccess={logOut} />\n      </div>\n      ) : (\n      <GoogleLogin\n          clientId={REACT_APP_OATH_CLIENT_ID}\n          buttonText=\"Sign in with Google\"\n          onSuccess={onSuccess}\n          onFailure={onFailure}\n          cookiePolicy={'single_host_origin'}\n          isSignedIn={true}\n      />\n      )}\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\nreportWebVitals();"],"sourceRoot":""}